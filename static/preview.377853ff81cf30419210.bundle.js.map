{"version":3,"file":"static/preview.377853ff81cf30419210.bundle.js","sources":["webpack:///./stories/dnd.tsx"],"sourcesContent":["\n  var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  var __STORY__ = \"import React from 'react';\\nimport { storiesOf } from '@storybook/react';\\nimport { action } from '@storybook/addon-actions';\\nimport { Droppable } from '../src/droppable';\\nimport { DragLayer } from '../src/drag-layer';\\nimport { Measure } from '../src/measure';\\nimport { DragHandle } from '../src/drag-handle';\\nimport { DraggableContext, DraggingProvider } from '../src/core';\\n\\nconst stories = storiesOf('react-dnd/Drag&Drop', module);\\n\\nconst Red = ({ ...props }: React.HTMLProps<HTMLDivElement>) => (\\n  <div {...props} style={{ ...props.style, background: `#fcc`, display: `inline-block`, padding: `2rem` }} />\\n);\\nconst Blue = ({ ...props }: React.HTMLProps<HTMLDivElement>) => (\\n  <div\\n    {...props}\\n    style={{ ...props.style, background: `#aaf`, display: `inline-block`, padding: `2rem`, opacity: 3 / 4 }}\\n  />\\n);\\nconst Yellow = ({ ...props }: React.HTMLProps<HTMLDivElement>) => (\\n  <div {...props} style={{ ...props.style, background: `#ffa`, display: `inline-block`, padding: `2rem` }} />\\n);\\n\\nstories\\n  .add(`Basic`, () => (\\n    <DraggingProvider>\\n      <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)}>\\n        {({ isDropping, dropProps, trackingProps }) => (\\n          <Red {...trackingProps} {...dropProps}>\\n            {isDropping ? 'Dropping!' : 'Waiting...'}\\n          </Red>\\n        )}\\n      </Droppable>\\n      <DraggableContext dataKey={1} onDragEnd={action(`onDragEnd`)} onDragStart={action(`onDragStart`)}>\\n        <DragLayer>\\n          <Blue>Being dragged</Blue>\\n        </DragLayer>\\n        <Measure>\\n          <DragHandle>\\n            <Yellow>Dragging me</Yellow>\\n          </DragHandle>\\n        </Measure>\\n      </DraggableContext>\\n    </DraggingProvider>\\n  ))\\n  .add(`Handle`, () => (\\n    <DraggingProvider>\\n      <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)}>\\n        {({ isDropping, dropProps, trackingProps, droppingMeta }) => (\\n          <Red {...trackingProps} {...dropProps}>\\n            {isDropping ? `Dropping ${droppingMeta}!` : 'Waiting...'}\\n          </Red>\\n        )}\\n      </Droppable>\\n      <DraggableContext dataKey={1} onDragEnd={action(`onDragEnd`)} onDragStart={action(`onDragStart`)}>\\n        <DragLayer>\\n          <Blue>\\n            <DragHandle>Handle</DragHandle> Being dragged\\n          </Blue>\\n        </DragLayer>\\n        <Measure>\\n          <Yellow>\\n            <DragHandle dataMeta=\\\"1\\\">Handle 1</DragHandle> <DragHandle dataMeta=\\\"2\\\">Handle 2</DragHandle> Dragging me\\n          </Yellow>\\n        </Measure>\\n        {/* : <Yellow {...dragContainerProps} innerRef={ref}>{dragging}<DragHandle>Handle</DragHandle> Drag me</Yellow> */}\\n      </DraggableContext>\\n    </DraggingProvider>\\n  ));\\n// .add(`Ordering`, () => (\\n//   <DraggingProvider>\\n//      <PositionContainer>\\n//       {({ refContainer, registries }) => (\\n//         <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)} refTracking={refContainer}>\\n//           {({ isDropping, dropProps, trackingProps, droppingPosition }) => (\\n//             <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\\n//               {orderingData.map((item) => (\\n//                 <PositionPublisher keyData={item}>\\n//                   {({ refContainer }) => (\\n//                     <Draggable dataKey={item} onDragEnd={action(`onDragEnd`)} onDragMove={undefined} onDragStart={action(`onDragStart`)} refTracking={refContainer}>\\n//                       {({ isDragged, dragContainerProps, dragHandleProps, trackingProps, dragging }) => (\\n//                         isDragged\\n//                           ? <Blue {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Blue>\\n//                           : <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Yellow>\\n//                       )}\\n//                     </Draggable>\\n//                   )}\\n//                 </PositionPublisher>\\n//               ))}\\n\\n//               <ol>\\n//                 {registries.map(({ getBounds, key }) => (\\n//                   <li>{key.text} ({getBounds().left}:{getBounds().top}, {getBounds().width}w{getBounds().height}h)</li>\\n//                 ))}\\n//               </ol>\\n//               <p style={{ whiteSpace: 'pre' }}>\\n//                 {isDropping\\n//                   ? <span>Dropping: {(() => {\\n//                     const elements = registries.map(({ getBounds, key }) => ({ bounds: getBounds(), key, order: orderingData.indexOf(key) }));\\n//                     const closest = closestCorner.horizontal(droppingPosition, elements);\\n//                     return (\\n//                       <span>{closest.isBefore ? 'Before' : 'After'} {closest.element.key.text}</span>\\n//                     );\\n//                   })()}</span>\\n//                   : `Drag something`}\\n//               </p>\\n//             </Red>\\n//           )}\\n//         </Droppable>\\n//       )}\\n//     </PositionContainer>\\n//   </DraggingProvider>\\n// ));\\n\";\n  var __ADDS_MAP__ = {};\n  \n  import React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Droppable } from \"../src/droppable\";\nimport { DragLayer } from \"../src/drag-layer\";\nimport { Measure } from \"../src/measure\";\nimport { DragHandle } from \"../src/drag-handle\";\nimport { DraggableContext, DraggingProvider } from \"../src/core\";\n\nconst stories = storiesOf(\"react-dnd/Drag&Drop\", module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__));\n\nconst Red = ({ ...props }: React.HTMLProps<HTMLDivElement>) => <div\n  {...props}\n  style={{ ...props.style, background: `#fcc`, display: `inline-block`, padding: `2rem` }} />;\nconst Blue = ({ ...props }: React.HTMLProps<HTMLDivElement>) => <div\n  {...props}\n  style={{ ...props.style, background: `#aaf`, display: `inline-block`, padding: `2rem`, opacity: 3 / 4 }} />;\nconst Yellow = ({ ...props }: React.HTMLProps<HTMLDivElement>) => <div\n  {...props}\n  style={{ ...props.style, background: `#ffa`, display: `inline-block`, padding: `2rem` }} />;\n\n\nstories\n  .add(`Basic`, () => (\n    <DraggingProvider>\n      <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)}>\n        {({ isDropping, dropProps, trackingProps }) => (\n          <Red {...trackingProps} {...dropProps}>\n            {isDropping ? \"Dropping!\" : \"Waiting...\"}\n          </Red>\n        )}\n      </Droppable>\n      <DraggableContext dataKey={1} onDragEnd={action(`onDragEnd`)} onDragStart={action(`onDragStart`)}>\n        <DragLayer>\n          <Blue>Being dragged</Blue>\n        </DragLayer>\n        <Measure>\n          <DragHandle><Yellow>Dragging me</Yellow></DragHandle>\n        </Measure>\n      </DraggableContext>\n    </DraggingProvider>\n  ))\n  .add(`Handle`, () => (\n    <DraggingProvider>\n      <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)}>\n        {({ isDropping, dropProps, trackingProps, droppingMeta }) => (\n          <Red {...trackingProps} {...dropProps}>\n            {isDropping ? `Dropping ${droppingMeta}!` : \"Waiting...\"}\n          </Red>\n        )}\n      </Droppable>\n      <DraggableContext dataKey={1} onDragEnd={action(`onDragEnd`)} onDragStart={action(`onDragStart`)}>\n        <DragLayer>\n          <Blue><DragHandle>Handle</DragHandle> Being dragged</Blue>\n        </DragLayer>\n        <Measure>\n          <Yellow><DragHandle dataMeta=\"1\">Handle 1</DragHandle> <DragHandle dataMeta=\"2\">Handle 2</DragHandle> Dragging me</Yellow>\n        </Measure>\n        {/* : <Yellow {...dragContainerProps} innerRef={ref}>{dragging}<DragHandle>Handle</DragHandle> Drag me</Yellow> */}\n      </DraggableContext>\n    </DraggingProvider>\n  ));\n  // .add(`Ordering`, () => (\n  //   <DraggingProvider>\n  //      <PositionContainer>\n  //       {({ refContainer, registries }) => (\n  //         <Droppable onDrop={action(`onDrop`)} onDragOver={action(`onDragOver`)} onDragOut={action(`onDragOut`)} refTracking={refContainer}>\n  //           {({ isDropping, dropProps, trackingProps, droppingPosition }) => (\n  //             <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\n  //               {orderingData.map((item) => (\n  //                 <PositionPublisher keyData={item}>\n  //                   {({ refContainer }) => (\n  //                     <Draggable dataKey={item} onDragEnd={action(`onDragEnd`)} onDragMove={undefined} onDragStart={action(`onDragStart`)} refTracking={refContainer}>\n  //                       {({ isDragged, dragContainerProps, dragHandleProps, trackingProps, dragging }) => (\n  //                         isDragged\n  //                           ? <Blue {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Blue>\n  //                           : <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Yellow>\n  //                       )}\n  //                     </Draggable>\n  //                   )}\n  //                 </PositionPublisher>\n  //               ))}\n\n  //               <ol>\n  //                 {registries.map(({ getBounds, key }) => (\n  //                   <li>{key.text} ({getBounds().left}:{getBounds().top}, {getBounds().width}w{getBounds().height}h)</li>\n  //                 ))}\n  //               </ol>\n  //               <p style={{ whiteSpace: 'pre' }}>\n  //                 {isDropping\n  //                   ? <span>Dropping: {(() => {\n  //                     const elements = registries.map(({ getBounds, key }) => ({ bounds: getBounds(), key, order: orderingData.indexOf(key) }));\n  //                     const closest = closestCorner.horizontal(droppingPosition, elements);\n  //                     return (\n  //                       <span>{closest.isBefore ? 'Before' : 'After'} {closest.element.key.text}</span>\n  //                     );\n  //                   })()}</span>\n  //                   : `Drag something`}\n  //               </p>\n  //             </Red>\n  //           )}\n  //         </Droppable>\n  //       )}\n  //     </PositionContainer>\n  //   </DraggingProvider>\n  // ));\n\n  "],"mappings":"AACA","sourceRoot":""}