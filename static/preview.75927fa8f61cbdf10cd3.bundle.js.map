{"version":3,"file":"static/preview.75927fa8f61cbdf10cd3.bundle.js","sources":["webpack:///./stories/index.tsx"],"sourcesContent":["\n  var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  var __STORY__ = \"import React from 'react';\\nimport { storiesOf } from '@storybook/react';\\nimport { action } from '@storybook/addon-actions';\\nimport { Droppable } from '../src/droppable';\\nimport { DraggingProvider } from '../src/dragging-provider';\\nimport { Draggable } from '../src/draggable';\\nimport { DragHandle } from '../src/drag-handle';\\nimport { PositionContainer } from '../src/position-container';\\nimport { PositionPublisher } from '../src/position-publisher';\\nimport { closestCorner } from '../src/strategy-closest-corner';\\n\\nconst stories = storiesOf('react-dnd', module);\\n\\nconst Red = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => (\\n  <div\\n    {...props}\\n    ref={innerRef}\\n    style={{ ...props.style, background: `#fcc`, display: `inline-block`, padding: `2rem` }}\\n  />\\n);\\nconst Blue = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => (\\n  <div\\n    {...props}\\n    ref={innerRef}\\n    style={{ ...props.style, background: `#aaf`, display: `inline-block`, padding: `2rem`, opacity: 3 / 4 }}\\n  />\\n);\\nconst Yellow = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => (\\n  <div\\n    {...props}\\n    ref={innerRef}\\n    style={{ ...props.style, background: `#ffa`, display: `inline-block`, padding: `2rem` }}\\n  />\\n);\\n\\nconst orderingData = [{ id: 1, text: `Hello` }, { id: 2, text: `World` }, { id: 3, text: `!` }];\\n\\nstories\\n  .add(`Basic`, () => (\\n    <DraggingProvider>\\n      <Droppable onDropped={action(`onDropped`)} onDropping={undefined}>\\n        {({ isDropping, dropProps, trackingProps }) => (\\n          <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\\n            {isDropping ? 'Dropping!' : 'Waiting...'}\\n          </Red>\\n        )}\\n      </Droppable>\\n      <Draggable\\n        dataDrag={1}\\n        onDragEnd={action(`onDragEnd`)}\\n        onDragMove={undefined}\\n        onDragStart={action(`onDragStart`)}\\n      >\\n        {({ isDragging, isDragged, dragContainerProps, dragHandleProps, trackingProps: { ref }, dragging }) =>\\n          isDragged ? (\\n            <Blue {...dragContainerProps} {...dragHandleProps} innerRef={ref}>\\n              Being dragged\\n            </Blue>\\n          ) : isDragging ? (\\n            <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={ref}>\\n              {dragging}Dragging me\\n            </Yellow>\\n          ) : (\\n            <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={ref}>\\n              {dragging}Drag me\\n            </Yellow>\\n          )\\n        }\\n      </Draggable>\\n    </DraggingProvider>\\n  ))\\n  .add(`Handle`, () => (\\n    <DraggingProvider>\\n      <Droppable onDropped={action(`onDropped`)} onDropping={undefined}>\\n        {({ isDropping, dropProps, trackingProps }) => (\\n          <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\\n            {isDropping ? 'Dropping!' : 'Waiting...'}\\n          </Red>\\n        )}\\n      </Droppable>\\n      <Draggable\\n        dataDrag={1}\\n        onDragEnd={action(`onDragEnd`)}\\n        onDragMove={undefined}\\n        onDragStart={action(`onDragStart`)}\\n      >\\n        {({ isDragging, isDragged, dragContainerProps, dragHandleProps, trackingProps: { ref }, dragging }) =>\\n          isDragged ? (\\n            <Blue {...dragContainerProps} innerRef={ref}>\\n              <DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Being dragged\\n            </Blue>\\n          ) : isDragging ? (\\n            <Yellow {...dragContainerProps} innerRef={ref}>\\n              {dragging}\\n              <DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Dragging me\\n            </Yellow>\\n          ) : (\\n            <Yellow {...dragContainerProps} innerRef={ref}>\\n              {dragging}\\n              <DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Drag me\\n            </Yellow>\\n          )\\n        }\\n      </Draggable>\\n    </DraggingProvider>\\n  ))\\n  .add(`Ordering`, () => (\\n    <DraggingProvider>\\n      <PositionContainer>\\n        {({ refContainer, registries }) => (\\n          <Droppable onDropped={action(`onDropped`)} onDropping={undefined} refTracking={refContainer}>\\n            {({ isDropping, dropProps, trackingProps, droppingPosition }) => (\\n              <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\\n                {orderingData.map(item => (\\n                  <PositionPublisher keyData={item}>\\n                    {({ refContainer }) => (\\n                      <Draggable\\n                        dataDrag={item}\\n                        onDragEnd={action(`onDragEnd`)}\\n                        onDragMove={undefined}\\n                        onDragStart={action(`onDragStart`)}\\n                        refTracking={refContainer}\\n                      >\\n                        {({ isDragged, dragContainerProps, dragHandleProps, trackingProps, dragging }) =>\\n                          isDragged ? (\\n                            <Blue {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>\\n                              {dragging}\\n                              {item.text}\\n                            </Blue>\\n                          ) : (\\n                            <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>\\n                              {dragging}\\n                              {item.text}\\n                            </Yellow>\\n                          )\\n                        }\\n                      </Draggable>\\n                    )}\\n                  </PositionPublisher>\\n                ))}\\n\\n                <ol>\\n                  {registries.map(({ getBounds, key }) => (\\n                    <li>\\n                      {key.text} ({getBounds().left}:{getBounds().top}, {getBounds().width}w{getBounds().height}h)\\n                    </li>\\n                  ))}\\n                </ol>\\n                <p style={{ whiteSpace: 'pre' }}>\\n                  {isDropping ? (\\n                    <span>\\n                      Dropping:{' '}\\n                      {(() => {\\n                        const elements = registries.map(({ getBounds, key }) => ({\\n                          bounds: getBounds(),\\n                          key,\\n                          order: orderingData.indexOf(key),\\n                        }));\\n                        const closest = closestCorner.horizontal(droppingPosition, elements);\\n                        return (\\n                          <span>\\n                            {closest.isBefore ? 'Before' : 'After'} {closest.element.key.text}\\n                          </span>\\n                        );\\n                      })()}\\n                    </span>\\n                  ) : (\\n                    `Drag something`\\n                  )}\\n                </p>\\n              </Red>\\n            )}\\n          </Droppable>\\n        )}\\n      </PositionContainer>\\n    </DraggingProvider>\\n  ));\\n\";\n  var __ADDS_MAP__ = {};\n  \n  import React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Droppable } from \"../src/droppable\";\nimport { DraggingProvider } from \"../src/dragging-provider\";\nimport { Draggable } from \"../src/draggable\";\nimport { DragHandle } from \"../src/drag-handle\";\nimport { PositionContainer } from \"../src/position-container\";\nimport { PositionPublisher } from \"../src/position-publisher\";\nimport { closestCorner } from \"../src/strategy-closest-corner\";\n\nconst stories = storiesOf(\"react-dnd\", module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__));\n\nconst Red = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => <div\n  {...props}\n  ref={innerRef}\n  style={{ ...props.style, background: `#fcc`, display: `inline-block`, padding: `2rem` }} />;\nconst Blue = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => <div\n  {...props}\n  ref={innerRef}\n  style={{ ...props.style, background: `#aaf`, display: `inline-block`, padding: `2rem`, opacity: 3 / 4 }} />;\nconst Yellow = ({ innerRef, ...props }: React.HTMLProps<HTMLDivElement> & { innerRef: any }) => <div\n  {...props}\n  ref={innerRef}\n  style={{ ...props.style, background: `#ffa`, display: `inline-block`, padding: `2rem` }} />;\n\nconst orderingData = [\n  { id: 1, text: `Hello` },\n  { id: 2, text: `World` },\n  { id: 3, text: `!` },\n];\n\nstories\n  .add(`Basic`, () => (\n    <DraggingProvider>\n      <Droppable onDropped={action(`onDropped`)} onDropping={undefined}>\n        {({ isDropping, dropProps, trackingProps }) => (\n          <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\n            {isDropping ? \"Dropping!\" : \"Waiting...\"}\n          </Red>\n        )}\n      </Droppable>\n      <Draggable dataDrag={1} onDragEnd={action(`onDragEnd`)} onDragMove={undefined} onDragStart={action(`onDragStart`)}>\n        {({ isDragging, isDragged, dragContainerProps, dragHandleProps, trackingProps: { ref }, dragging }) => (\n          isDragged\n            ? <Blue {...dragContainerProps} {...dragHandleProps} innerRef={ref}>Being dragged</Blue>\n            : isDragging\n              ? <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={ref}>{dragging}Dragging me</Yellow>\n              : <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={ref}>{dragging}Drag me</Yellow>\n\n        )}\n      </Draggable>\n    </DraggingProvider>\n  ))\n  .add(`Handle`, () => (\n    <DraggingProvider>\n      <Droppable onDropped={action(`onDropped`)} onDropping={undefined}>\n        {({ isDropping, dropProps, trackingProps }) => (\n          <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\n            {isDropping ? \"Dropping!\" : \"Waiting...\"}\n          </Red>\n        )}\n      </Droppable>\n      <Draggable dataDrag={1} onDragEnd={action(`onDragEnd`)} onDragMove={undefined} onDragStart={action(`onDragStart`)}>\n        {({ isDragging, isDragged, dragContainerProps, dragHandleProps, trackingProps: { ref }, dragging }) => (\n          isDragged\n            ? <Blue {...dragContainerProps} innerRef={ref}><DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Being dragged</Blue>\n            : isDragging\n              ? <Yellow {...dragContainerProps} innerRef={ref}>{dragging}<DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Dragging me</Yellow>\n              : <Yellow {...dragContainerProps} innerRef={ref}>{dragging}<DragHandle dragHandleProps={dragHandleProps}>Handle</DragHandle> Drag me</Yellow>\n        )}\n      </Draggable>\n    </DraggingProvider>\n  ))\n  .add(`Ordering`, () => (\n    <DraggingProvider>\n      <PositionContainer>\n        {({ refContainer, registries }) => (\n          <Droppable onDropped={action(`onDropped`)} onDropping={undefined} refTracking={refContainer}>\n            {({ isDropping, dropProps, trackingProps, droppingPosition }) => (\n              <Red {...trackingProps} {...dropProps} innerRef={trackingProps.ref}>\n                {orderingData.map((item) => (\n                  <PositionPublisher keyData={item}>\n                    {({ refContainer }) => (\n                      <Draggable dataDrag={item} onDragEnd={action(`onDragEnd`)} onDragMove={undefined} onDragStart={action(`onDragStart`)} refTracking={refContainer}>\n                        {({ isDragged, dragContainerProps, dragHandleProps, trackingProps, dragging }) => (\n                          isDragged\n                            ? <Blue {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Blue>\n                            : <Yellow {...dragContainerProps} {...dragHandleProps} innerRef={trackingProps.ref}>{dragging}{item.text}</Yellow>\n                        )}\n                      </Draggable>\n                    )}\n                  </PositionPublisher>\n                ))}\n\n                <ol>\n                  {registries.map(({ getBounds, key }) => (\n                    <li>{key.text} ({getBounds().left}:{getBounds().top}, {getBounds().width}w{getBounds().height}h)</li>\n                  ))}\n                </ol>\n                <p style={{ whiteSpace: 'pre' }}>\n                  {isDropping\n                    ? <span>Dropping: {(() => {\n                      const elements = registries.map(({ getBounds, key }) => ({ bounds: getBounds(), key, order: orderingData.indexOf(key) }));\n                      const closest = closestCorner.horizontal(droppingPosition, elements);\n                      return (\n                        <span>{closest.isBefore ? 'Before' : 'After'} {closest.element.key.text}</span>\n                      );\n                    })()}</span>\n                    : `Drag something`}\n                </p>\n              </Red>\n            )}\n          </Droppable>\n        )}\n      </PositionContainer>\n    </DraggingProvider>\n  ));\n\n  "],"mappings":"AACA","sourceRoot":""}